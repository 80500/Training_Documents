###############
5th Mar. 2024 	
###############		
		
		
		Version Control System Using GIT
		
		Jenkins 
		
		Linux ! 
		
		AWS ????
		
		AWS DevOps Services :
		
		Build Tools :
		Maven - 
		
		Open Source DevOps Tools :
		
		GIT CLI / GITHUB 
		Jenkins 
		Docker 
		Kubernetes
		Ansible
		Terraform 
		
		Continuous Development :::
		
		
		Version Control System Using GIT :::
		
		A Developer
		
		Create a index.html 
		
		<html> 
		--
		--
		--
		--
		--
		--
		--
		--
		</html> 
		
		save as index.html 
		
		Testing access the page .
		
		<html>
		--
		--
		--
		--
		--adfasdfsdf
		--asdfasdf
		--
		</html> 	
		
		save index.html
		
		
		<html>
		--
		--
		--asdfasdf
		--asdf
		--adfasdfsdf
		--asdfasdf
		--
		</html> 	
		
		save index.html		
		
		Version Control System :::
		
		
			index.html_V1.0		(Tag/Verion_Number/Commit_ID)
			index.html_V1.1
			index.html_V1.2
			index.html_V1.3
			index.html_V1.4
			index.html_V1.5
			
		Developers they use Version Control System to save theire changes.
		
		
		Version Control System :::
		
			- It is used to Version Control the Source Code Changes 
			- It is used to track the changes 
			
		Types of Version Control System :::
		
			Local VCS 				# It is used to version the changes in the local machine - for single user.
			
			Centralized VCS 		# It is used to maintain the source code in a central server 
									# Users should always be online to working with Centralized VCS 
									# If the Centralized Server is Down, Users cannot access the Repositories.
			
			Distributed VCS 		# It is used to maintain the source code in a Remote servers
									# Allows users to work in offline mode 
									# The Copies of Repositories are maintained in multiple servers, All Users will have their local copy of the repository.
									
									
			GIT :::
			
				- GIT is one of the Open-Source Distributed Version Control System 
				- It is used to Version Control the Source Code Changes 
				- It is used to Track the Changes 
				- It is used to perform Parallel Development using Branching Techniques.
				
			Repository --> 	It is collection of Folders and files 
							Developers maintain the Source Code Project Folders and Files
			
			Terminologies :::
			
			
			Git CLI		--> To be installed in the Local Machine 
			
			Remote Servers :
			Github 		--> Remote git Repository 
			gitlab
			bitbucket 
			Azure Repo 
			AWS CodeCommit 
			
			
			Install GIT Client in the Local Machine 
			
			
			Working with GIT ::::
			
			Git File Workflow ::: 60% of GIT 
			
			Distributed VCS :::
			
			Local Machine																			<---->				Remote Server
			(Install Git Client)
			
			Working Directory 		--->	Staging Area 	---> 	Local Repository 					---->				Remote Repository
			
			index.html 				add 	index.html		commit 			index.html_V1.0				push 					index.html_V1.0
			index.html				add 	index.html		commit			index.html_V1.1                                     index.html_V1.1
			index.html				add 	index.html		commit			index.html_V1.2                                     index.html_V1.2
			index.html				add 	index.html		commit			index.html_V1.3                                     index.html_V1.3
			index.html				add 	index.html		commit			index.html_V1.4                                     index.html_V1.4
			index.html				add 	index.html		commit			index.html_V1.5                                     index.html_V1.5
			
			
			
			
			Developers' Workload :::

			- Enhancement Project / Bug fixing 		# Remote Repository already exist
			
			- New Project 							# Remote Repository Might not be present at initial stage of the project.
			
			
			git commands :::
			
			git clone 				==>		Is used to Clone/copy the entire remote repository to the local Machine

			git add 				==>		Is used to add the changes from working directory to staging area.				
			
			git commit 				==> 	Is used to commit the changes from staging area to local repository.
			
			git push 				==> 	Is used to push the changes from Local Repository to Remote Repository
			
			git fetch / git pull 	:::
							
							- Both Git Fetch and Git Pull are used to handle the incremental Changes from Remote to Local Repository.
							
							- git fetch --> Is just used to check for the incremental changes. If there are any changes exist in the remote repository, it will update the changes in the local repository. NOT is the Working Directory.
							
							- git pull --> Is used to check for the incremental changes and if there are any changes exist in the remote repository, it will update the changes in the local repository as well as in the Working Directory.	

								git pull ==> git fetch and git merge
			
			
			
			fork 					==>		Is used to Copy one Remote Repository to Another Remote Repository
			
			
			Install GIT Client in the Local Machine ::::
			
			https://git-scm.com/downloads
			
			Install git client in Windows Machine :::
			
				- git bash 			# Uses the Linux prompt to work with git cli commands.
				- git cmd
				- git gui 
			
			
Summary ::

			Install GIT in the Local Machine 
			
			Go thru the class recordings and class notes before you join the next session!
			
	

###############
6th Mar. 2024 	
###############		

		Working with GIT :::
		
		Git Cli Commands :::
		
		
		Open git bash in windows machine 
		
		Folder Structure :::
		
		Project Folder 		--> Workspace - working directory 
			file1
			file2
			file3
		
		
			Distributed VCS :::
			
			Local Machine																			<---->				Remote Server
			(Install Git Client)
			
			Working Directory 		--->	Staging Area 	---> 	Local Repository 					---->				Remote Repository
			index.html 				add 	index.html		commit 			index.html_V1.0				push 					index.html_V1.0	

		Open Git bash 

		cd d:
		
		mkdir SA-Feb24-Projects 
		
		cd SA-Feb24-Projects 
		
		mkdir project1 
		mkdir project2	==> Local Repository.
		
		
		Initialize local git repository
		
		git init 				# 	Is used to initialize a repository, 
									It creates a default branch called master.
									It Creates GIT Directory.(Used by git to manage the versioning)
									
									Branch is the logical copy of Repo.
		
		
		echo "rec1" >> file1.txt
		
		git status				# Used to find the current status of repository
		
		git add file1.txt 		
		
		git commit -m "Created file1.txt"
		
		git log					# Is used to get the list of commit in the repository 
		
		HEAD 					# 	Is a git pointer used to refer latest commit of the current branch.
									It is Maintained by git.
									
		
		git global / local Configuration :::			# Should be done before the initial commit.
				
		GIT Global Configuration 	-- # Is applicable for the repositories 
		
			git config --global user.name "Loksai"
			
			git config --global user.email "loksai@asf.com"
		
		GIT Local Configuration 	-- # Is applicable for a specific repository  
		
			git config user.name "Loksai"
			
			git config user.email "loksai@asf.com"
			
			
		Repository :::
		
		As per process :::
		
		git init 
		
		
		echo "rec1" >> file1.txt 
		
		git add file1.txt 

			git config --global user.name "Loksai"
			
			git config --global user.email "loksai@asf.com"		
			
		git commit -m "Created file1.txt"
		
		
		git add :
		
			git add <file_name>
			
			git add <file_name1> <file_name2>
			
			git add *.doc 
			
			git add .							# Add all the files to staging area.
		
		
		
		Un-Stage the files Changes.
		
		
			git rm --cached file1.txt			# It will remove the change from staging Area 
												# Changes will be back to Working Directory 
												
			git rm -f file1.doc 				
												# It will remove the file from staging Area as well as from the working Directory.  											
		
			
		git log :								# Is used to get the list of commit in the repository
		
			git log --oneline 
			
			git log -2 
			
			git log --stat -2
			
			git log --oneline -2
		
		
		git show <commit_id>
		
		Undo Actions :::
		
			git reset 
		
			git revert 
		
		
				Both git reset and revert are used to undo the changes :
				
		
		git reset :::
		
			Syntax :
			
				git reset <commit_id> <reset_Option>
				
				reset Options : 
				
					It used to Undo the Changes.
					It will update the Commit History 
					It will not create any new commit point to track the changes.
					As a best practice it is NOT recommended to use git reset HARD Option in the shared repository.
				
				git reset --soft :
				
					It is used to take the changes from local repository back to staging area.
					The Changes will be available in both staging area and working directory.
					Head pointer will be reset to the specific commit.
				
				
				git reset --mixed : # Default
					It is used to take the changes from local repository back to working Directory.
					The Changes will be available in the working directory. i.e., the changes will be removed from local repo. and staging area. 
					Head pointer will be reset to the specific commit.
				
				git reset --hard :
				
					This is the permanent deletion.
					The Changes will be permanently removed from local repository, staging area as well as from the working directory.
					Head pointer will be reset to the specific commit.
					
		
		git reset <commit_id>
			
			
		git ls-files	# is used to get the list of files that are being tracked by git. 
						# The staged / committed entires.
		

Summary :

		Install Git 
		
		Work with Git Misc. Command in Local Repo. 
		
		
		
Next ::		
		git revert --> 	It is an alternative to git reset --hard
						It can be used in the shared repository.
		
		branch Techinques
		
		git rebase, squash, stash 
		
		git ignore, 
		
		git remote repos..

501  cd d:
  502  pwd
  503  mkdir SA-Feb22-DevOps
  504  cd SA-Feb22-DevOps/
  505  mkdir Project1
  506  cd Project1/
  507  clear
  508  pwd
  509  ls
  510  ls -a
  511  clear
  512  pwd
  513  clear
  514  git init
  515  ls
  516  ls -a
  517  cd .git/
  518  ls
  519  cd ..
  520  ls
  521  clear
  522  ls
  523  ls -a
  524  clear
  525  echo "HEllo"
  526  echo "Record1" >> file1.txt
  527  ls
  528  cd ..
  529  ls
  530  mkdir Project2
  531  ls
  532  cd Project2/
  533  clear
  534  pwd
  535  ls -a
  536  clear
  537  git init
  538  ls -a
  539  clear
  540  git status
  541  ls
  542  echo "Record1" >> file1.txt
  543  git status
  544  git add file1.txt
  545  git status
  546  git commit -m "Created file1.txt"
  547  git status
  548  git log
  549  clear
  550  ls
  551  git status
  552  echo "rec1" >> file2.txt
  553  git status
  554  git add file2.txt
  555  git status
  556  git commit -m "Created file2.txt"
  557  git log
  558  cat file2.txt
  559  clear
  560  git log
  561  git config user.name "Loksai"
  562  echo "rec1" >> file3.txt
  563  git add file3.txt
  564  git commit -m "created file3.txt"
  565  git log
  566  cd ..
  567  mkdir Project3
  568  cd Project3
  569  git init
  570  echo "rec1" >> file1.txt
  571  git add file1.txt
  572  git commit -m "Created file1.txt"
  573  git log
  574  git config --global user.name "Loksai-ETA"
  575  echo "rec1" >> f2.txt
  576  git add f2.txt
  577  git commit -m "Created f2.txt"
  578  git log
  579  ls
  580  cd .git/
  581  ls
  582  cd ..
  583  clear
  584  ls
  585  ckear
  586  clear
  587  git status
  588  clear
  589  ls
  590  cd ..
  591  ls
  592  mkdir sampledir1
  593  cd sampledir1/
  594  pwd
  595  ckear
  596  clear
  597  pwd
  598  git init
  599  git status
  600  echo "rec1" >> f1.txt
  601  git status
  602  git add f1.txt
  603  git status
  604  git commit -m "Created f1.txt"
  605  clear
  606  git log
  607  ls
  608  git status
  609  clear
  610  echo "rec1" >> index.html
  611  ls
  612  git status
  613  echo "rec1" >> about.html
  614  ls
  615  echo "rec1" >> s1.java
  616  echo "rec1" >> s2.java
  617  echo "rec1" >> s3.java
  618  echo "rec1" >> a1.txt
  619  echo "rec1" >> a2.txt
  620  ls
  621  echo "rec1" >> w1.doc
  622  echo "rec1" >> w2.doc
  623  clear
  624  ls
  625  git status
  626  git add a1.txt
  627  git status
  628  git add a2.txt about.html
  629  git status
  630  git add *.doc
  631  git status
  632  git add .
  633  git status
  634  git rm --cached a1.txt
  635  git status
  636  git rm --cached *.doc
  637  git status
  638  git add .
  639  git status
  640  git rm -f a1.txt
  641  ls
  642  git status
  643  clear
  644  git log
  645  git status
  646  git commit -m "Created sample files"
  647  git log
  648  echo "rec1" >> l1.txt
  649  git add .
  650  git commit -m "Created l1.txt"
  651  ehco "rec1" >> l2.txt
  652  git add .
  653  git commit -m "created l2.txt"
  654  echo "rec1" >> l3.doc
  655  git add .
  656  git commit -m "Created l3.doc"
  657  clear
  658  git log
  659  git log
  660  git log --oneline
  661  git log --oneline -2
  662  git log --oneline -3
  663  git log --oneline -4
  664  git log -2
  665  git log --stat -2
  666  clear
  667  git log --stat -1
  668  git log -1
  669  clear
  670  git log --oneline
  671  git show c3af605
  672  git show 3d27853
  673  ls -a
  674  clear
  675  git log --oneline
  676  git log --oneline -2
  677  git log --stat
  678  git log --stat -2
  679  clear
  680  git log --oneline
  681  git show 2ee5193
  682  clear
  683  cd ..
  684  mkdir sampledir2
  685  cd sampledir2
  686  clear
  687  git init
  688  echo "rec1" >> s1.txt
  689  git add .
  690  git commit -m "CM1"
  691  echo "rec1" >> s2.txt
  692  git add .
  693  git commit -m "CM2"
  694  echo "rec1" >> s3.txt
  695  git add .
  696* git commit -m "CM"
  697  echo "rec1" >> s4.txt
  698  git add .
  699  git commit -m "CM4"
  700  echo "rec1" >> s5.txt
  701  git add .
  702  git commit -m "CM5"
  703  clear
  704  git log --oneline
  705  ls
  706  ls
  707  git ls-files
  708  clear
  709  ls
  710  git ls-files
  711  git status
  712  git log --oneline
  713  git reset --soft c54a662
  714  git status
  715  ls
  716  git ls-files
  717  git log --oneline
  718  git status
  719  git commit -m "CM5.1"
  720  clear
  721  git status
  722  git log --oneline
  723  ls
  724  git ls-files
  725  git reset --mixed c54a662
  726  git status
  727  ls
  728  git ls-files
  729  git add .
  730  git commit -m "CM5.2"
  731  clear
  732  git status
  733  ls
  734  git ls-files
  735  git log --oneline
  736  git reset --hard c54a662
  737  git status
  738  git ls-files
  739  ls
  740  git log --oneline
  741  git reset --hard 99227d2
  742  ls
  743  git ls-files
  744  git log --oneline
  745  clear
  746  git log --oneline
  747  ls
  748  history


###############
7th Mar. 2024 	
###############		
		
		git revert --> 	It is an alternative to git reset --hard
						It can be used in the shared repository.


		RESET ::
		Repo1 
		
			master --> c1,c2,c3,c4,c5(latest)
			
			git reset --hard c3
			
			log :	c1,c2,c3(latest) 
			
			git reset --hard c2 
			
			log : 	c1, c2(latest)
			
			
		git revert --> 	It is an alternative to git reset --hard
						It can be used in the shared repository.
						It is used to revert a specific commit point.
						It will maintain the commit history.
						
						git revert is same as git reset --hard. 
						The difference is git reset will not create new commit point, but git revert will create a commit point to track the changes.
						
			Syntax: 
					git revert <commit_id>
					
					
			Repo1:
			
				master : c1,c2,c3,c4,c5
				
				
		
		
		git ignore :
		
		What is the purpose of Local Repository ?
		
		What is the purpose of Remote Repository ?
		
		Java_Web_Application Project Directory:
		
			src/main/java 
			src/test/java 
			target/
			application.properties 
			pom.xml
			database_Credentials
			App_Configurations
			
		git ignore : Is used to ignore the files/folders in the git repository from tracking 
		
		git init 
		
		vi .gitignore 
			target/
			*.war 
			
		save the file 
		
		git add . 
		
		git commit -m "Initial Commit for .gitignore"
		
		
			Working Directory 		--->	Staging Area 	---> 	Local Repository 					---->				Remote Repository
			index.html 				add 	index.html		commit 			index.html_V1.0				push 					index.html_V1.0	
		
		
		GIT Branching Techniques :::
		
		GIT is used for Parallel Development :::
		
		Repo1:
		
		Java_Web_Application Folder :
		
			src/main/java 
				sign.java 
				
		How maintain the integrity of the Source Code Repository ???
		
		Branches ::::
		
		Repo1: 
		
			master 	branch				# Default Branch 		# Prod Copy. 
			cm1,cm2,cm3
			s1.txt,s2.txt,s3.txt
			
		
		
			Repo1 
				master - cm1,cm2,cm3 		--> sign.java 
						cm1,cm2,cm3,f1cm1,f2cm2						# Prod Copy. 		
				
					feature_branch1 - cm1,cm2,cm3 		--> sign.java 
					
									- cm1,cm2,cm3,f1cm1,f2cm2
									
									git merge to master !
									
		GIT Branch ::
						Is used to create an isolated area to make the incremental changes in the repository
						It is used to maintain the integrity of the master branch in Source Code Repository
						It is used to Perform parallel development 
						Branches helps the developers to independently work on their changes without impacting the master branch
						
		GIT Branching Strategies / Techniques :::
		
						It is the policy which is defined to maintain the integrity of the Master Branch.
						
		Parallel Development ???
		
		Scenario 1 :
		
			Project_Repo1
				master - cm1,cm2,cm3 
						cm1,cm2,cm3,f1cm1,f1cm2				#Upon merging feature1
						
					feature1 	- cm1,cm2,cm3
								- cm1,cm2,cm3,f1cm1,f1cm2
		
		Scenario 2 :				
			Project_Repo1
				master 	- cm1,cm2,cm3 
						- cm1,cm2,cm3,Developer1_Branch_Changes	
				
					Developer1_Branch :	- cm1,cm2,cm3
										- cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Merging from feature1 and feature2
										
						feature1 		- cm1,cm2,cm3
										- cm1,cm2,cm3,f1cm1,f1cm2
						feature2		- cm1,cm2,cm3
										- cm1,cm2,cm3,f2cm1,f2cm2
		
		
		Scenario 3 :				
			Project_Repo1
				master 	- cm1,cm2,cm3 
				
					Intregration_Branch 	- cm1,cm2,cm3 
									cm1,cm2,cm3,Developer1_Branch_Changes,Developer2_Branch_Changes  # Upon merging from Dev1 & Dev2 Branches
				
						Developer1_Branch :	- cm1,cm2,cm3
											- cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Merging from feature1 and feature2
											
							feature1 		- cm1,cm2,cm3
											- cm1,cm2,cm3,f1cm1,f1cm2
							feature2		- cm1,cm2,cm3
											- cm1,cm2,cm3,f2cm1,f2cm2
						
			
						Developer2_Branch :	- cm1,cm2,cm3
											- cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Merging from feature1 and feature2
											
							feature1 		- cm1,cm2,cm3
											- cm1,cm2,cm3,f1cm1,f1cm2
							feature2		- cm1,cm2,cm3
											- cm1,cm2,cm3,f2cm1,f2cm2
						
		
		
		Scenario 4 :				
			Project_Repo1
				master 	- cm1,cm2,cm3,
						- cm1,cm2,cm3,cm4						# cm4 is - Upon merging from Release Branch
				
					Release_Branch - cm1,cm2,cm3,Team1_Changes,Team2_Changes 
				
						Intregration_Branch1 	- cm1,cm2,cm3 														# Team1
										cm1,cm2,cm3,Developer1_Branch_Changes,Developer2_Branch_Changes  # Upon merging from Dev1 & Dev2 Branches
					
							Developer1_Branch :	- cm1,cm2,cm3
												- cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Merging from feature1 and feature2
												
								feature1 		- cm1,cm2,cm3
												- cm1,cm2,cm3,f1cm1,f1cm2
								feature2		- cm1,cm2,cm3
												- cm1,cm2,cm3,f2cm1,f2cm2
							
				
							Developer2_Branch :	- cm1,cm2,cm3
												- cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Merging from feature1 and feature2
												
								feature1 		- cm1,cm2,cm3
												- cm1,cm2,cm3,f1cm1,f1cm2
								feature2		- cm1,cm2,cm3
												- cm1,cm2,cm3,f2cm1,f2cm2
							
				
						Intregration_Branch2 	- cm1,cm2,cm3 														# Team2
										cm1,cm2,cm3,Developer1_Branch_Changes,Developer2_Branch_Changes  # Upon merging from Dev1 & Dev2 Branches
					
							Developer1_Branch :	- cm1,cm2,cm3
												- cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Merging from feature1 and feature2
												
								feature1 		- cm1,cm2,cm3
												- cm1,cm2,cm3,f1cm1,f1cm2
								feature2		- cm1,cm2,cm3
												- cm1,cm2,cm3,f2cm1,f2cm2
							
				
							Developer2_Branch :	- cm1,cm2,cm3
												- cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Merging from feature1 and feature2
												
								feature1 		- cm1,cm2,cm3
												- cm1,cm2,cm3,f1cm1,f1cm2
								feature2		- cm1,cm2,cm3
												- cm1,cm2,cm3,f2cm1,f2cm2
							
			
		
		Working with Branches :::
		
			Craete Branch :::
			
			git branch				# To get the list of branches 
			
			git branch <new_Branch_Name>	# Used to create a new branch 

			git switch -c <feature1>	# To Create and switch to that new branch.
			
			git switch <master>			# Just to switch to the existing branch.
			
			git checkout -b <new_Branch_Name>	# Used to Create and switch to that new branch.
			
			Git Merge ::: Is used to Merge the Changes from current Branch to Target Branch.
			
			Repo1 :
				master - cm1

					git switch -c feature1 
					
					echo "rec" > asdf
					
					git add .
					
					commit  
					
					git switch master 
					
					git merge feature1 			# Should be executed from the Target Branch
					
  529  mkdir testrepo1
  530  cd testrepo1/
  531  clear
  532  git init
  533  echo "rec1" >> s1.txt
  534  git add .
  535  git commit -m "CM1"
  536  echo "rec1" >> s2.txt
  537  git add .
  538  git commit -m "CM2"
  539  echo "rec1" >> s3.txt
  540  git add .
  541  git commit -m "CM3"
  542  echo "rec1" >> s4.txt
  543  git add .
  544  git commit -m "CM4"
  545  clear
  546  git log --oneline
  547  git status
  548  ls
  549  git ls-files
  550  git revert 8532bcc
  551  git log --oneline
  552  ls
  553  git ls-files
  554  git show ba3bfb2
  555  git log --oneline
  556  git revert ba3bfb2
  557  git log --oneline
  558  ls
  559  clear
  560  ls
  561  git log --oneline
  562  git revert 7912f5d
  563  git log --oneline
  564  ls
  565  git ls-files
  566  ls
  567  git revert 5e6db28
  568  ls
  569  clear
  570  clear
  571  cd ..
  572  mkdir testrepo2
  573  cd testrepo2
  574  clear
  575  git init
  576  git status
  577  ls
  578  ls -a
  579  vi .gitignore
  580  cat .gitignore
  581  ls
  582  ls -a
  583  git add .
  584  git commit -m "Created .gitignore file"
  585  clear
  586  ls
  587  ls -a
  588  git log
  589  clear
  590  echo "rec1" >> index.jsp
  591  ls
  592  git status
  593  echo "rec1" >> sample.txt
  594  git status
  595  ls
  596  git status
  597  cat .gitignore
  598  echo "rec1" >> s1.doc
  599  ehco "rec1" >> s1.txt
  600  echo "rec1" >> s1.txt
  601  git status
  602  git add .
  603  git ls-files
  604  git commit -m "Created some files"
  605  clear
  606  ls
  607  git ls-files
  608  clear
  609  cd ..
  610  mkdir testrepo3
  611  cd testrepo3/
  612  git init
  613  clear
  614  cd ..
  615  clear
  616  ls
  617  mkdir testrepo4
  618  clear
  619  cd testrepo4
  620  git init
  621  echo "rec1" >> s1.txt
  622  git add .
  623  git commit -m "cm1"
  624  echo "rec1" >> s2.txt
  625  git add .
  626  git commit -m "cm2"
  627  clear
  628  git log --oneline
  629  git branch
  630  ls
  631  git switch -c feature1
  632  git branch
  633  git switch master
  634  clear
  635  git log --oneline
  636  ls
  637  git branch
  638  git switch -c feature2
  639  clear
  640  ls
  641  git log --oneline
  642  git switch master
  643  clear
  644  git branch
  645  git branch feature3
  646  git branch
  647  git branch feature4
  648  git branch
  649  ckear
  650  clear
  651  git branch
  652  git checkout -b feature5
  653  clear
  654  cd ..
  655  mkdir testrepo5
  656  cd testrepo5/
  657  clear
  658  git init
  659  echo "Rec1" >> q1.txt
  660  git add .
  661  git commit -m "CM1"
  662  clear
  663  ls
  664  git log
  665  git status
  666  git branch
  667  git branch feature1
  668  git branch feature2
  669  git branch
  670  git log --oneline
  671  git switch feature1
  672  git log --oneline
  673  ls
  674  echo "rec1" >> file1.txt
  675  git add .
  676  git commit -m "f1cm1"
  677  clear
  678  git log --oneline
  679  git switch master
  680  ls
  681  git merge feature1
  682  ls
  683  git log --oneline
  684  clear
  685  cd ..
  686  mkdir testrepo6
  687  cd testrepo6/
  688  clear
  689  git init
  690  echo "rec1" >> f1.txt
  691  ls
  692  git add .
  693  git commit -m "CM1"
  694  git switch -c feature1
  695  ls
  696  cat f1.txt
  697  git log --oneline
  698  echo "rec1" >> file1.txt
  699  git add .
  700  git commit -m "f1cm1"
  701  echo "rec1" >> file2.txt
  702  git add .
  703  git commit -m "f1cm2"
  704  echo "rec1" >> file3.txt
  705  git add .
  706  git commit -m "f1cm3"
  707  clear
  708  git log --oneline
  709  ls
  710  git switch master
  711  git log --oneline
  712  ls
  713  git merge feature1
  714  ls
  715  git log --oneline
  716  clear
  717  git branch
  718  git branch feature2
  719  git branch feature3
  720  git branch
  721  git log --oneline
  722  clear
  723  ls
  724  git switch feature1
  725  ls
  726  cat f1.txt
  727  echo "rec1" >> f1.txt
  728  echo "rec2" >> f1.txt
  729  cat f1.txt
  730  vi f1.txt
  731  cat f1.txt
  732  git add .
  733  git commit -m "f1cm2"
  734  git log --oneline
  735  git switch master
  736  git merge feature1
  737  cat f1.txt
  738  git log --oneline
  739  history

Next :
			Merging multiple branches 
			
			Handling Merge Conflicts 
		
			git rebase, squash, stash 
			
			git ignore, 
			
			git remote repos..		
